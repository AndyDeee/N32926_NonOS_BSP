<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\VIN_DEMO_Data\PC2M01-2D01-GP-QVGA-Port1\VIN_DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\VIN_DEMO_Data\PC2M01-2D01-GP-QVGA-Port1\VIN_DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Jul 24 09:57:50 2018
<BR><P>
<H3>Maximum Stack Usage =       3800 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_move &rArr; fs_fat_rename_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[81]">Vector_Table</a>
 <LI><a href="#[80]">Reset_Go</a>
 <LI><a href="#[171]">sys_flush_and_clean_dcache</a>
 <LI><a href="#[225]">sysSetupCP15</a>
 <LI><a href="#[6a]">Undefined_Handler</a>
 <LI><a href="#[6b]">SWI_Handler1</a>
 <LI><a href="#[6c]">Prefetch_Handler</a>
 <LI><a href="#[6d]">Abort_Handler</a>
 <LI><a href="#[6e]">IRQ_Handler</a>
 <LI><a href="#[6f]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[171]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[171]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[1ea]">parse_partition_records</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ea]">parse_partition_records</a><BR>
 <LI><a href="#[1bd]">fsSetFileSize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">fsOpenFile</a><BR>
 <LI><a href="#[6a]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">Undefined_Handler</a><BR>
 <LI><a href="#[6b]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">SWI_Handler1</a><BR>
 <LI><a href="#[6c]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">Prefetch_Handler</a><BR>
 <LI><a href="#[6d]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">Abort_Handler</a><BR>
 <LI><a href="#[6e]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">IRQ_Handler</a><BR>
 <LI><a href="#[6f]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6d]">Abort_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[71]">Delay</a> from demo.o(.text) referenced 21 times from smpl_hm1375.o(.text)
 <LI><a href="#[6f]">FIQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[b]">IQ_GetBrightness</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[f]">IQ_GetContrast</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[11]">IQ_GetHue</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[d]">IQ_GetSharpness</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[c]">IQ_SetBrightness</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[10]">IQ_SetContrast</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[12]">IQ_SetHue</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[e]">IQ_SetSharpness</a> from smpl_ov10633.o(.text) referenced 2 times from smpl_ov10633.o(.data)
 <LI><a href="#[6e]">IRQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[73]">MD_Handler</a> from demo.o(.text) referenced from smpl_nt99141.o(.text)
 <LI><a href="#[6c]">Prefetch_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[80]">Reset_Go</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[6b]">SWI_Handler1</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[75]">TVP_I2c_delay</a> from smpl_tvp5150.o(.text) referenced from smpl_tvp5150.o(.text)
 <LI><a href="#[a8]">TimerBase</a> from demo.o(.text) referenced from demo.o(.text)
 <LI><a href="#[6a]">Undefined_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[11f]">VPOST_InterruptServiceRiuntine</a> from smpl_vpost.o(.text) referenced from smpl_vpost.o(.text)
 <LI><a href="#[125]">VPOST_InterruptServiceRiuntine_2</a> from smpl_vpost.o(.text) referenced from smpl_vpost.o(.text)
 <LI><a href="#[74]">VideoIn2_InterruptHandler</a> from demo.o(.text) referenced from smpl_nt99141.o(.text)
 <LI><a href="#[72]">VideoIn_InterruptHandler</a> from demo.o(.text) referenced 22 times from smpl_hm1375.o(.text)
 <LI><a href="#[2d]">WB_Interrupt_Shell</a> from wb_aic.o(.text) referenced 188 times from wb_aic.o(.data)
 <LI><a href="#[60]">__fclose</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[63]">__fget_stat</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[67]">__find_close</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[65]">__find_first</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[66]">__find_next</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[68]">__fioctl</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[5d]">__fopen</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[5e]">__fread</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[62]">__fseek</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[64]">__fset_stat</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[61]">__fsizing</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[5f]">__fwrite</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[58]">_delfile</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[77]">_dramClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[59]">_mkdir</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[5b]">_move</a> from nvtfat_ldisk.o(.text) referenced 4 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[7d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5a]">_rmdir</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[7c]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[173]">_sysClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[5c]">_volume_label</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[7e]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[99]">isr_card_insert</a> from demo.o(.text) referenced 2 times from demo.o(.text)
 <LI><a href="#[9c]">isr_card_remove</a> from demo.o(.text) referenced 2 times from demo.o(.text)
 <LI><a href="#[7a]">jpegISR</a> from jpegcodec.o(.text) referenced from jpegcodec.o(.text)
 <LI><a href="#[70]">main</a> from demo.o(.text) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[2e]">sd_disk_init</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[32]">sd_disk_init0</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[36]">sd_disk_init1</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[3a]">sd_disk_init2</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[31]">sd_disk_ioctl</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[35]">sd_disk_ioctl0</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[39]">sd_disk_ioctl1</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[3d]">sd_disk_ioctl2</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[2f]">sd_disk_read</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[33]">sd_disk_read0</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[37]">sd_disk_read1</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[3b]">sd_disk_read2</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[30]">sd_disk_write</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[34]">sd_disk_write0</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[38]">sd_disk_write1</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[3c]">sd_disk_write2</a> from sdglue.o(.text) referenced 2 times from sdglue.o(.data)
 <LI><a href="#[16d]">sysFiqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[16c]">sysIrqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[78]">sysTimerISR</a> from wb_timer.o(.text) referenced 2 times from wb_timer.o(.text)
 <LI><a href="#[79]">sysUartISR</a> from wb_uart.o(.text) referenced from wb_uart.o(.text)
 <LI><a href="#[15]">videoIn0_Close</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[1f]">videoIn0_DisableInt</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[1e]">videoIn0_EnableInt</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[23]">videoIn0_GetOperationMode</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[1d]">videoIn0_GetStride</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[13]">videoIn0_Init</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[20]">videoIn0_InstallCallback</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[76]">videoIn0_IntHandler</a> from videoin0.o(.text) referenced from videoin0.o(.text)
 <LI><a href="#[14]">videoIn0_Open</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[1a]">videoIn0_PreviewPipeSize</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[21]">videoIn0_SetBaseStartAddress</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[26]">videoIn0_SetColorEffectParameter</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[18]">videoIn0_SetCropWinSize</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[19]">videoIn0_SetCropWinStartAddr</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[27]">videoIn0_SetDataFormatAndOrder</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[2a]">videoIn0_SetInputType</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[28]">videoIn0_SetMotionDet</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[29]">videoIn0_SetMotionDetEx</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[22]">videoIn0_SetOperationMode</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[24]">videoIn0_SetPacketFrameBufferControl</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[16]">videoIn0_SetPipeEnable</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[17]">videoIn0_SetPlanarFormat</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[25]">videoIn0_SetSensorPolarity</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[2c]">videoIn0_SetShadowRegister</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[2b]">videoIn0_SetStandardCCIR656</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[1c]">videoIn0_SetStride</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[40]">videoIn1_Close</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[4a]">videoIn1_DisableInt</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[49]">videoIn1_EnableInt</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[4e]">videoIn1_GetOperationMode</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[48]">videoIn1_GetStride</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[3e]">videoIn1_Init</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[4b]">videoIn1_InstallCallback</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[7b]">videoIn1_IntHandler</a> from videoin1.o(.text) referenced from videoin1.o(.text)
 <LI><a href="#[3f]">videoIn1_Open</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[45]">videoIn1_PreviewPipeSize</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[4c]">videoIn1_SetBaseStartAddress</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[51]">videoIn1_SetColorEffectParameter</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[43]">videoIn1_SetCropWinSize</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[44]">videoIn1_SetCropWinStartAddr</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[52]">videoIn1_SetDataFormatAndOrder</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[55]">videoIn1_SetInputType</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[53]">videoIn1_SetMotionDet</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[54]">videoIn1_SetMotionDetEx</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[4d]">videoIn1_SetOperationMode</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[4f]">videoIn1_SetPacketFrameBufferControl</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[41]">videoIn1_SetPipeEnable</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[42]">videoIn1_SetPlanarFormat</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[50]">videoIn1_SetSensorPolarity</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[57]">videoIn1_SetShadowRegister</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[56]">videoIn1_SetStandardCCIR656</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[47]">videoIn1_SetStride</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[1b]">videoin0_EncodePipeSize</a> from videoin0.o(.text) referenced 2 times from videoin0.o(.data)
 <LI><a href="#[46]">videoin1_EncodePipeSize</a> from videoin1.o(.text) referenced 2 times from videoin1.o(.data)
 <LI><a href="#[7f]">vpostISR</a> from w55fa92_vpost_driver.o(i.vpostISR) referenced from w55fa92_vpost_driver.o(i.vpostInstallCallBack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[81]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[80]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>

<P><STRONG><a name="[82]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[83]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2bc]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2bd]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2be]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[86]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2bf]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[87]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[273]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[2c0]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[92]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[89]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2d0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2d1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2d2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2d3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2d4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2d5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[2d6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2d8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2d9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2da]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2db]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2dc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[84]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2dd]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[91]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[2de]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[93]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2df]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[295]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[2e0]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2e1]"></a>CoWork_VideoIn0_InterruptHandler</STRONG> (ARM, 24 bytes, Stack size 0 bytes, demo.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e3]"></a>CoWork_VideoIn1_InterruptHandler</STRONG> (ARM, 24 bytes, Stack size 0 bytes, demo.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>CoWork_VideoIn_InterruptHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, demo.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>VideoIn_InterruptHandler</STRONG> (ARM, 616 bytes, Stack size 16 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VideoIn_InterruptHandler
</UL>
<BR>[Address Reference Count : 22]<UL><LI> smpl_nt99050.o(.text)
<LI> smpl_nt99141.o(.text)
<LI> smpl_nt99252.o(.text)
<LI> smpl_nt99340.o(.text)
<LI> smpl_ov7670.o(.text)
<LI> smpl_ov9660.o(.text)
<LI> smpl_hm1375.o(.text)
<LI> smpl_ov7725.o(.text)
<LI> smpl_gc0308.o(.text)
<LI> smpl_nt99160.o(.text)
<LI> smpl_tw9912.o(.text)
<LI> smpl_tw9900.o(.text)
<LI> smpl_tvp5150.o(.text)
<LI> smpl_sa71113.o(.text)
<LI> smpl_wt8861.o(.text)
<LI> smpl_sp1628.o(.text)
<LI> smpl_gm7150.o(.text)
<LI> smpl_hm2056.o(.text)
<LI> smpl_nt99142.o(.text)
<LI> smpl_ov10633.o(.text)
<LI> smpl_sc1046.o(.text)
<LI> smpl_hm1246.o(.text)
</UL>
<P><STRONG><a name="[2e5]"></a>VideoIn_GetCurrFrameCount</STRONG> (ARM, 12 bytes, Stack size 0 bytes, demo.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>VideoIn_ClearFrameCount</STRONG> (ARM, 16 bytes, Stack size 0 bytes, demo.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>VideoIn2_InterruptHandler</STRONG> (ARM, 616 bytes, Stack size 16 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VideoIn2_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_nt99141.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>Delay</STRONG> (ARM, 60 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
</UL>
<BR>[Address Reference Count : 21]<UL><LI> smpl_nt99050.o(.text)
<LI> smpl_nt99141.o(.text)
<LI> smpl_nt99252.o(.text)
<LI> smpl_nt99340.o(.text)
<LI> smpl_ov7670.o(.text)
<LI> smpl_ov9660.o(.text)
<LI> smpl_hm1375.o(.text)
<LI> smpl_ov7725.o(.text)
<LI> smpl_gc0308.o(.text)
<LI> smpl_nt99160.o(.text)
<LI> smpl_tw9912.o(.text)
<LI> smpl_tw9900.o(.text)
<LI> smpl_sa71113.o(.text)
<LI> smpl_wt8861.o(.text)
<LI> smpl_sp1628.o(.text)
<LI> smpl_gm7150.o(.text)
<LI> smpl_hm2056.o(.text)
<LI> smpl_nt99142.o(.text)
<LI> smpl_ov10633.o(.text)
<LI> smpl_sc1046.o(.text)
<LI> smpl_hm1246.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>TimerBase</STRONG> (ARM, 24 bytes, Stack size 0 bytes, demo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> demo.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>isr_card_insert</STRONG> (ARM, 376 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = isr_card_insert &rArr; sicSdOpen0 &rArr; fmiInitSDDevice &rArr; fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>isr_card_remove</STRONG> (ARM, 20 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = isr_card_remove &rArr; sicSdClose0 &rArr; sicSdClose_sel &rArr; fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>init</STRONG> (ARM, 352 bytes, Stack size 40 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = init &rArr; sicSdOpen0 &rArr; fmiInitSDDevice &rArr; fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetTimerReferenceClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetTimerEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen0
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicIoctl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAssignDriveNumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>MD_Handler</STRONG> (ARM, 16 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = MD_Handler &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_nt99141.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>main</STRONG> (ARM, 4172 bytes, Stack size 16 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = main &rArr; Smpl_SA71113_VGA &rArr; JpegEncTest &rArr; WriteFile &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptPriorityLevel
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_DEV1_HD_DEV2_VGA
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_LightMode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST_2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[df]"></a>WriteFile</STRONG> (ARM, 216 bytes, Stack size 544 bytes, filewrite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = WriteFile &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[dc]"></a>JpegEncTest</STRONG> (ARM, 520 bytes, Stack size 168 bytes, jpegenc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = JpegEncTest &rArr; WriteFile &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegWait
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>HM1375_Init</STRONG> (ARM, 284 bytes, Stack size 40 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = HM1375_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
</UL>

<P><STRONG><a name="[bc]"></a>Smpl_HM1375_VGA</STRONG> (ARM, 816 bytes, Stack size 32 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM1375_VGA &rArr; HM1375_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>Smpl_HM1375_HD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM1375_HD &rArr; HM1375_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>I2C_Write_8bitSlaveAddr_8bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150SetInputSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150SetVideoformat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150SetInputSource
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150SetVideoformat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVactive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVdelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustBrightness
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustConstraint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>

<P><STRONG><a name="[fc]"></a>I2C_Read_8bitSlaveAddr_8bitReg_8bitData</STRONG> (ARM, 100 bytes, Stack size 16 bytes, smpl_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_8bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVactive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVdelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustBrightness
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustConstraint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>

<P><STRONG><a name="[ff]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 212 bytes, Stack size 24 bytes, smpl_nt99050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
</UL>

<P><STRONG><a name="[100]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_nt99050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
</UL>

<P><STRONG><a name="[101]"></a>NT99050_Init</STRONG> (ARM, 460 bytes, Stack size 40 bytes, smpl_nt99050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = NT99050_Init &rArr; I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
</UL>

<P><STRONG><a name="[b8]"></a>Smpl_NT99050</STRONG> (ARM, 700 bytes, Stack size 32 bytes, smpl_nt99050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99050 &rArr; NT99050_Init &rArr; I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>NT99141_Init</STRONG> (ARM, 460 bytes, Stack size 40 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = NT99141_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
</UL>

<P><STRONG><a name="[b5]"></a>Smpl_NT99141_VGA</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99141_VGA &rArr; NT99141_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>Smpl_NT99141_VGA_MotionDetection</STRONG> (ARM, 764 bytes, Stack size 32 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99141_VGA_MotionDetection &rArr; NT99141_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>Smpl_NT99141_HD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99141_HD &rArr; NT99141_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>Smpl_NT99141_DEV1_HD_DEV2_VGA</STRONG> (ARM, 664 bytes, Stack size 32 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99141_DEV1_HD_DEV2_VGA &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>NT99160_Init</STRONG> (ARM, 460 bytes, Stack size 40 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = NT99160_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
</UL>

<P><STRONG><a name="[b9]"></a>Smpl_NT99160_VGA</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99160_VGA &rArr; NT99160_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>Smpl_NT99160_SVGA</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99160_SVGA &rArr; NT99160_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>Smpl_NT99160_HD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99160_HD &rArr; NT99160_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>NT99252_Init</STRONG> (ARM, 460 bytes, Stack size 40 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = NT99252_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
</UL>

<P><STRONG><a name="[c1]"></a>Smpl_NT99252_SVGA</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99252_SVGA &rArr; NT99252_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>Smpl_NT99252_UXGA</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99252_UXGA &rArr; NT99252_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>NT99340_Init</STRONG> (ARM, 460 bytes, Stack size 40 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = NT99340_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
</UL>

<P><STRONG><a name="[c0]"></a>Smpl_NT99340_QXGA</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99340_QXGA &rArr; NT99340_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Smpl_NT99340_FULLHD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99340_FULLHD &rArr; NT99340_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>Smpl_NT99340_HD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99340_HD &rArr; NT99340_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>OV7670_Init</STRONG> (ARM, 420 bytes, Stack size 32 bytes, smpl_ov7670.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = OV7670_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
</UL>

<P><STRONG><a name="[b3]"></a>Smpl_OV7670_VGA</STRONG> (ARM, 772 bytes, Stack size 32 bytes, smpl_ov7670.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Smpl_OV7670_VGA &rArr; OV7670_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>OV7725_Init</STRONG> (ARM, 420 bytes, Stack size 32 bytes, smpl_ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = OV7725_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
</UL>

<P><STRONG><a name="[b4]"></a>Smpl_OV7725_VGA</STRONG> (ARM, 840 bytes, Stack size 32 bytes, smpl_ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Smpl_OV7725_VGA &rArr; OV7725_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>OV9660_Init</STRONG> (ARM, 420 bytes, Stack size 32 bytes, smpl_ov9660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = OV9660_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
</UL>

<P><STRONG><a name="[b1]"></a>Smpl_OV9660_VGA</STRONG> (ARM, 612 bytes, Stack size 136 bytes, smpl_ov9660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = Smpl_OV9660_VGA &rArr; OV9660_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>Smpl_OV9660_SXGA</STRONG> (ARM, 472 bytes, Stack size 136 bytes, smpl_ov9660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = Smpl_OV9660_SXGA &rArr; OV9660_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>VPOST_InterruptServiceRiuntine</STRONG> (ARM, 212 bytes, Stack size 8 bytes, smpl_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VPOST_InterruptServiceRiuntine
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_vpost.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>InitVPOST</STRONG> (ARM, 88 bytes, Stack size 32 bytes, smpl_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = InitVPOST &rArr; vpostLCMInit &rArr; vpostLCMInit_GIANTPLUS_GPM1006D0 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostEnableInt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
</UL>

<P><STRONG><a name="[125]"></a>VPOST_InterruptServiceRiuntine_2</STRONG> (ARM, 212 bytes, Stack size 8 bytes, smpl_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VPOST_InterruptServiceRiuntine_2
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_vpost.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>InitVPOST_2</STRONG> (ARM, 88 bytes, Stack size 32 bytes, smpl_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = InitVPOST_2 &rArr; vpostLCMInit &rArr; vpostLCMInit_GIANTPLUS_GPM1006D0 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostEnableInt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
</UL>

<P><STRONG><a name="[29b]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via BLX)
</UL>

<P><STRONG><a name="[289]"></a>__user_initial_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f6]"></a>DrvI2C_Open</STRONG> (ARM, 272 bytes, Stack size 16 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvI2C_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[f7]"></a>DrvI2C_Close</STRONG> (ARM, 4 bytes, Stack size 0 bytes, drvi2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[f0]"></a>DrvI2C_SendStart</STRONG> (ARM, 288 bytes, Stack size 8 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvI2C_SendStart &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[f2]"></a>DrvI2C_SendStop</STRONG> (ARM, 228 bytes, Stack size 8 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvI2C_SendStop &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[f1]"></a>DrvI2C_WriteByte</STRONG> (ARM, 632 bytes, Stack size 24 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[f4]"></a>DrvI2C_ReadByte</STRONG> (ARM, 560 bytes, Stack size 24 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvI2C_ReadByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
</UL>

<P><STRONG><a name="[127]"></a>DrvI2C_Slave_ReadByte</STRONG> (ARM, 368 bytes, Stack size 16 bytes, drvi2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Delay
</UL>

<P><STRONG><a name="[12a]"></a>WT8861_Init</STRONG> (ARM, 236 bytes, Stack size 32 bytes, smpl_wt8861.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = WT8861_Init &rArr; I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
</UL>

<P><STRONG><a name="[c5]"></a>Smpl_WT8861_VGA</STRONG> (ARM, 1052 bytes, Stack size 32 bytes, smpl_wt8861.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = Smpl_WT8861_VGA &rArr; WT8861_Init &rArr; I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_SetFieldDetection
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>GC0308_Init</STRONG> (ARM, 420 bytes, Stack size 32 bytes, smpl_gc0308.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = GC0308_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
</UL>

<P><STRONG><a name="[c7]"></a>Smpl_GC0308_VGA</STRONG> (ARM, 788 bytes, Stack size 32 bytes, smpl_gc0308.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Smpl_GC0308_VGA &rArr; GC0308_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>SA71113_Init</STRONG> (ARM, 240 bytes, Stack size 32 bytes, smpl_sa71113.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = SA71113_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
</UL>

<P><STRONG><a name="[c6]"></a>Smpl_SA71113_VGA</STRONG> (ARM, 1312 bytes, Stack size 40 bytes, smpl_sa71113.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = Smpl_SA71113_VGA &rArr; JpegEncTest &rArr; WriteFile &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_SetFieldDetection
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>SP1628_Init</STRONG> (ARM, 364 bytes, Stack size 40 bytes, smpl_sp1628.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = SP1628_Init &rArr; SnrPowerDown &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
</UL>

<P><STRONG><a name="[c3]"></a>Smpl_SP1628_HD</STRONG> (ARM, 852 bytes, Stack size 32 bytes, smpl_sp1628.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_SP1628_HD &rArr; SP1628_Init &rArr; SnrPowerDown &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>TW9912_Init</STRONG> (ARM, 280 bytes, Stack size 32 bytes, smpl_tw9912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = TW9912_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
</UL>

<P><STRONG><a name="[c4]"></a>Smpl_TW9912_VGA</STRONG> (ARM, 824 bytes, Stack size 32 bytes, smpl_tw9912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Smpl_TW9912_VGA &rArr; TW9912_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>AdjustConstraint</STRONG> (ARM, 156 bytes, Stack size 16 bytes, smpl_tw9912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
</UL>

<P><STRONG><a name="[13a]"></a>AdjustBrightness</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_tw9912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
</UL>

<P><STRONG><a name="[13b]"></a>AdjustVdelay</STRONG> (ARM, 140 bytes, Stack size 16 bytes, smpl_tw9912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
</UL>

<P><STRONG><a name="[13c]"></a>AdjustVactive</STRONG> (ARM, 368 bytes, Stack size 16 bytes, smpl_tw9912.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetChar
</UL>

<P><STRONG><a name="[13f]"></a>TW9900_Init</STRONG> (ARM, 340 bytes, Stack size 40 bytes, smpl_tw9900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = TW9900_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
</UL>

<P><STRONG><a name="[d2]"></a>Smpl_TW9900_VGA</STRONG> (ARM, 840 bytes, Stack size 32 bytes, smpl_tw9900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_TW9900_VGA &rArr; TW9900_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>GM7150SetVideoformat</STRONG> (ARM, 204 bytes, Stack size 24 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = GM7150SetVideoformat &rArr; I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
</UL>

<P><STRONG><a name="[143]"></a>GM7150SetInputSource</STRONG> (ARM, 112 bytes, Stack size 16 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = GM7150SetInputSource &rArr; I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
</UL>

<P><STRONG><a name="[144]"></a>GM7150_Init</STRONG> (ARM, 500 bytes, Stack size 32 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = GM7150_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150SetInputSource
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150SetVideoformat
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
</UL>

<P><STRONG><a name="[ce]"></a>Smpl_GM7150_OneField</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Smpl_GM7150_OneField &rArr; GM7150_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>Smpl_GM7150_TwoFields</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Smpl_GM7150_TwoFields &rArr; GM7150_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>NT99142_Init</STRONG> (ARM, 788 bytes, Stack size 48 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = NT99142_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
</UL>

<P><STRONG><a name="[c8]"></a>Smpl_NT99142_VGA</STRONG> (ARM, 692 bytes, Stack size 32 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99142_VGA &rArr; NT99142_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>Smpl_NT99142_SVGA</STRONG> (ARM, 636 bytes, Stack size 32 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99142_SVGA &rArr; NT99142_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>Smpl_NT99142_HD</STRONG> (ARM, 636 bytes, Stack size 32 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = Smpl_NT99142_HD &rArr; NT99142_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>OV10633_Init</STRONG> (ARM, 548 bytes, Stack size 40 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = OV10633_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
</UL>

<P><STRONG><a name="[cb]"></a>Smpl_OV10633_VGA</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_OV10633_VGA &rArr; OV10633_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>Smpl_OV10633_HD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_OV10633_HD &rArr; OV10633_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>register_sensor</STRONG> (ARM, 32 bytes, Stack size 8 bytes, smpl_ov10633.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[155]"></a>SC1046_Init</STRONG> (ARM, 288 bytes, Stack size 40 bytes, smpl_sc1046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = SC1046_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
</UL>

<P><STRONG><a name="[cd]"></a>Smpl_SC1046_HD</STRONG> (ARM, 828 bytes, Stack size 32 bytes, smpl_sc1046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_SC1046_HD &rArr; SC1046_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>TVP5150SetVideoformat</STRONG> (ARM, 204 bytes, Stack size 24 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = TVP5150SetVideoformat &rArr; I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
</UL>

<P><STRONG><a name="[159]"></a>TVP5150SetInputSource</STRONG> (ARM, 152 bytes, Stack size 24 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = TVP5150SetInputSource &rArr; I2C_Write_8bitSlaveAddr_8bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
</UL>

<P><STRONG><a name="[d0]"></a>Smpl_TVP5150_OneField</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_TVP5150_OneField &rArr; TVP5150_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>Smpl_TVP5150_TwoFields</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_TVP5150_TwoFields &rArr; TVP5150_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>HM1246_Init</STRONG> (ARM, 752 bytes, Stack size 40 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = HM1246_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
</UL>

<P><STRONG><a name="[d7]"></a>Smpl_HM1246_VGA</STRONG> (ARM, 716 bytes, Stack size 32 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM1246_VGA &rArr; HM1246_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>Smpl_HM1246_HD720P</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM1246_HD720P &rArr; HM1246_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>Smpl_HM1246_SXGA</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM1246_SXGA &rArr; HM1246_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>HM2056_Init</STRONG> (ARM, 284 bytes, Stack size 40 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = HM2056_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
</UL>

<P><STRONG><a name="[166]"></a>CMOSHM2056_SetLightMode</STRONG> (ARM, 956 bytes, Stack size 8 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = CMOSHM2056_SetLightMode &rArr; I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_LightMode
</UL>

<P><STRONG><a name="[d5]"></a>Smpl_HM2056_LightMode</STRONG> (ARM, 68 bytes, Stack size 8 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = Smpl_HM2056_LightMode &rArr; CMOSHM2056_SetLightMode &rArr; I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOSHM2056_SetLightMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>Smpl_HM2056_VGA</STRONG> (ARM, 732 bytes, Stack size 32 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM2056_VGA &rArr; HM2056_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>Smpl_HM2056_HD</STRONG> (ARM, 660 bytes, Stack size 32 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = Smpl_HM2056_HD &rArr; HM2056_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e7]"></a>videoIn0_SetInitFrame</STRONG> (ARM, 16 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>videoIn0_GetSkipFrame</STRONG> (ARM, 12 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>videoIn0_Init</STRONG> (ARM, 1564 bytes, Stack size 48 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = videoIn0_Init &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>videoIn0_Open</STRONG> (ARM, 428 bytes, Stack size 40 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = videoIn0_Open &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>videoIn0_Close</STRONG> (ARM, 36 bytes, Stack size 8 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = videoIn0_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>videoIn0_SetPacketFrameBufferControl</STRONG> (ARM, 72 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2e9]"></a>videoIn0_GetPacketFrameBufferControl</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>videoIn0_InstallCallback</STRONG> (ARM, 148 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2ea]"></a>videoIn0_Reset</STRONG> (ARM, 84 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>videoIn0_EnableInt</STRONG> (ARM, 96 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>videoIn0_DisableInt</STRONG> (ARM, 96 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2eb]"></a>videoIn0_IsIntEnabled</STRONG> (ARM, 116 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>videoIn0_ClearInt</STRONG> (ARM, 188 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>videoIn0_PollInt</STRONG> (ARM, 116 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>videoIn0_SetPipeEnable</STRONG> (ARM, 56 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2ee]"></a>videoIn0_GetPipeEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>videoIn0_SetShadowRegister</STRONG> (ARM, 24 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>videoIn0_SetSensorPolarity</STRONG> (ARM, 108 bytes, Stack size 12 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = videoIn0_SetSensorPolarity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2ef]"></a>videoIn0_GetSensorPolarity</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>videoIn0_SetDataFormatAndOrder</STRONG> (ARM, 56 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2f0]"></a>videoIn0_GetDataFormatAndOrder</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>videoIn0_SetPlanarFormat</STRONG> (ARM, 132 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2f1]"></a>videoIn0_GetPlanarFormat</STRONG> (ARM, 20 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>videoIn0_SetMotionDet</STRONG> (ARM, 100 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2f2]"></a>videoIn0_GetMotionDet</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>videoIn0_SetMotionDetEx</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2f3]"></a>videoIn0_GetMotionDetEx</STRONG> (ARM, 44 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>videoIn0_SetMotionDetFreq</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>videoIn0_GetMotionDetFreq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>videoIn0_SetOperationMode</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>videoIn0_GetOperationMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2f6]"></a>videoIn0_GetProcessedDataCount</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>videoIn0_SetCropWinStartAddr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2f7]"></a>videoIn0_GetCropWinStartAddr</STRONG> (ARM, 40 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>videoIn0_SetCropWinSize</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>videoIn0_GetCropWinSize</STRONG> (ARM, 40 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoin0_EncodePipeSize
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_PreviewPipeSize
</UL>

<P><STRONG><a name="[16a]"></a>videoIn0_SetVerticalScaleFactor</STRONG> (ARM, 200 bytes, Stack size 20 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = videoIn0_SetVerticalScaleFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoin0_EncodePipeSize
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_PreviewPipeSize
</UL>

<P><STRONG><a name="[2f8]"></a>DrvVideoIn0_GetVerticalScaleFactor</STRONG> (ARM, 120 bytes, Stack size 12 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>videoIn0_SetHorizontalScaleFactor</STRONG> (ARM, 192 bytes, Stack size 20 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = videoIn0_SetHorizontalScaleFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoin0_EncodePipeSize
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_PreviewPipeSize
</UL>

<P><STRONG><a name="[2f9]"></a>DrvVideoIn0_GetHorizontalScaleFactor</STRONG> (ARM, 112 bytes, Stack size 12 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>DrvVideoIn0_SetFrameRateScaleFactor</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>DrvVideoIn0_GetFrameRateScaleFactor</STRONG> (ARM, 32 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>DrvVideoIn0_SetAddressMatch</STRONG> (ARM, 12 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>videoIn0_GetAddressMatch</STRONG> (ARM, 16 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>videoIn0_SetStride</STRONG> (ARM, 32 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>videoIn0_GetStride</STRONG> (ARM, 40 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>videoIn0_SetBaseStartAddress</STRONG> (ARM, 100 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2fe]"></a>videoIn0_GetBaseStartAddress</STRONG> (ARM, 108 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>videoIn0_SetInputType</STRONG> (ARM, 60 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[2ff]"></a>videoIn0_GetInputType</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>videoIn0_SetStandardCCIR656</STRONG> (ARM, 56 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>videoIn0_SetFieldDetection</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
</UL>

<P><STRONG><a name="[300]"></a>videoIn0_GetFieldDetection</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>videoIn0_SetColorEffect</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>DrvVideoIn0_GetColorEffect</STRONG> (ARM, 24 bytes, Stack size 0 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>videoIn0_SetColorEffectParameter</STRONG> (ARM, 96 bytes, Stack size 12 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = videoIn0_SetColorEffectParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[303]"></a>videoIn0_GetColorEffectParameter</STRONG> (ARM, 128 bytes, Stack size 8 bytes, videoin0.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>videoIn0_PreviewPipeSize</STRONG> (ARM, 104 bytes, Stack size 24 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = videoIn0_PreviewPipeSize &rArr; videoIn0_SetHorizontalScaleFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_SetHorizontalScaleFactor
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_SetVerticalScaleFactor
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_GetCropWinSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>videoin0_EncodePipeSize</STRONG> (ARM, 104 bytes, Stack size 24 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = videoin0_EncodePipeSize &rArr; videoIn0_SetHorizontalScaleFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_SetHorizontalScaleFactor
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_SetVerticalScaleFactor
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_GetCropWinSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>register_vin_device</STRONG> (ARM, 84 bytes, Stack size 16 bytes, w55fa92_videoin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = register_vin_device &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_DEV1_HD_DEV2_VGA
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
</UL>

<P><STRONG><a name="[16c]"></a>sysIrqHandler</STRONG> (ARM, 316 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>sysFiqHandler</STRONG> (ARM, 316 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>sysInitializeAIC</STRONG> (ARM, 76 bytes, Stack size 16 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[168]"></a>sysDisableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Close
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Close
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicClose
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegClose
</UL>

<P><STRONG><a name="[124]"></a>sysEnableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST_2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Open
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Open
</UL>

<P><STRONG><a name="[304]"></a>sysInstallExceptionHandler</STRONG> (ARM, 136 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>sysInstallIrqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>sysInstallISR</STRONG> (ARM, 336 bytes, Stack size 24 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Open
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Open
</UL>

<P><STRONG><a name="[307]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 100 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 204 bytes, Stack size 16 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysSetInterruptPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>sysSetInterruptType</STRONG> (ARM, 160 bytes, Stack size 12 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
</UL>

<P><STRONG><a name="[aa]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
</UL>

<P><STRONG><a name="[308]"></a>sysSetAIC2SWMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>sysGetInterruptHighEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>sysGetIBitState</STRONG> (ARM, 32 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 408 bytes, Stack size 12 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysGetSdramSizebyMB
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[a5]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[a3]"></a>sysDisableCache</STRONG> (ARM, 84 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[a4]"></a>sysFlushCache</STRONG> (ARM, 72 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[30c]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCachePages
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPhyPageAddr
</UL>

<P><STRONG><a name="[176]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
</UL>

<P><STRONG><a name="[30d]"></a>_sysLockCode</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>_sysUnLockCode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>sysGetPLLOutputHz</STRONG> (ARM, 168 bytes, Stack size 56 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Open
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Init
</UL>

<P><STRONG><a name="[30f]"></a>sysCheckPllConstraint</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>_sysGetPLLControlRegister</STRONG> (ARM, 292 bytes, Stack size 56 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[310]"></a>sysSetPLLControlRegister</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>_sysClockSwitch</STRONG> (ARM, 344 bytes, Stack size 24 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sysClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>_sysClockSwitchStart</STRONG> (ARM, 180 bytes, Stack size 56 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9f]"></a>sysGetExternalClock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Open
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Init
</UL>

<P><STRONG><a name="[177]"></a>sysGetDramClock</STRONG> (ARM, 88 bytes, Stack size 8 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[178]"></a>sysGetSystemClock</STRONG> (ARM, 200 bytes, Stack size 32 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
</UL>

<P><STRONG><a name="[179]"></a>sysGetCPUClock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[17a]"></a>sysSetSystemClock</STRONG> (ARM, 1284 bytes, Stack size 72 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[17b]"></a>sysSetCPUClock</STRONG> (ARM, 148 bytes, Stack size 24 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[17c]"></a>sysGetHCLK1Clock</STRONG> (ARM, 48 bytes, Stack size 16 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sysGetHCLK1Clock &rArr; sysGetCPUClock &rArr; sysGetSystemClock &rArr; sysGetPLLOutputHz
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
</UL>

<P><STRONG><a name="[17d]"></a>sysSetAPBClock</STRONG> (ARM, 168 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[17e]"></a>sysGetHCLK234Clock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[17f]"></a>sysGetAPBClock</STRONG> (ARM, 44 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[180]"></a>sysSetPllClock</STRONG> (ARM, 408 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[77]"></a>_dramClockSwitch</STRONG> (ARM, 1768 bytes, Stack size 60 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _dramClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>_dramClockSwitchStart</STRONG> (ARM, 192 bytes, Stack size 56 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
</UL>

<P><STRONG><a name="[182]"></a>sysSetDramClock</STRONG> (ARM, 324 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[78]"></a>sysTimerISR</STRONG> (ARM, 1032 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_timer.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>sysGetTicks</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[311]"></a>sysResetTicks</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>sysUpdateTickCount</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>sysSetTimerReferenceClock</STRONG> (ARM, 124 bytes, Stack size 0 bytes, wb_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[a7]"></a>sysStartTimer</STRONG> (ARM, 1128 bytes, Stack size 32 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[184]"></a>sysStopTimer</STRONG> (ARM, 700 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[313]"></a>sysClearWatchDogTimerCount</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>sysClearWatchDogTimerInterruptStatus</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>sysDisableWatchDogTimer</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>sysDisableWatchDogTimerReset</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>sysEnableWatchDogTimer</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>sysEnableWatchDogTimerReset</STRONG> (ARM, 36 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>sysInstallWatchDogTimerISR</STRONG> (ARM, 92 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[319]"></a>sysSetWatchDogTimerInterval</STRONG> (ARM, 60 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>sysSetTimerEvent</STRONG> (ARM, 852 bytes, Stack size 16 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysSetTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[31a]"></a>sysClearTimerEvent</STRONG> (ARM, 340 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>sysDOS_Time_To_UTC</STRONG> (ARM, 304 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalTime
</UL>

<P><STRONG><a name="[186]"></a>sysUTC_To_DOS_Time</STRONG> (ARM, 328 bytes, Stack size 24 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sysUTC_To_DOS_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>

<P><STRONG><a name="[187]"></a>sysSetLocalTime</STRONG> (ARM, 64 bytes, Stack size 28 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
</UL>

<P><STRONG><a name="[189]"></a>sysGetCurrentTime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sysGetCurrentTime &rArr; sysUTC_To_DOS_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
</UL>

<P><STRONG><a name="[da]"></a>sysDelay</STRONG> (ARM, 96 bytes, Stack size 16 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[a0]"></a>sysUartPort</STRONG> (ARM, 160 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[31b]"></a>sysUartInstallcallback</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>sysUartISR</STRONG> (ARM, 768 bytes, Stack size 24 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysUartISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.text)
</UL>
<P><STRONG><a name="[31c]"></a>sysUartEnableInt</STRONG> (ARM, 148 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>sysInitializeUART</STRONG> (ARM, 516 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[18d]"></a>_PutChar_f</STRONG> (ARM, 452 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
</UL>

<P><STRONG><a name="[18c]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[193]"></a>sysPrintf</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[9a]"></a>sysprintf</STRONG> (ARM, 284 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150SetInputSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150SetVideoformat
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150SetInputSource
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150SetVideoformat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVactive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVdelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustBrightness
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustConstraint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_DEV1_HD_DEV2_VGA
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD_Handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_card_remove
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_card_insert
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_open
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Open
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Show_info
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRspDataIn
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCheckSector
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Set_clock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetWindowDecode
</UL>

<P><STRONG><a name="[ab]"></a>sysGetChar</STRONG> (ARM, 56 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVactive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustVdelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustBrightness
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustConstraint
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[31d]"></a>sysPutChar</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>sysUartTransfer</STRONG> (ARM, 72 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>gpio_open</STRONG> (ARM, 24 bytes, Stack size 8 bytes, libgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[196]"></a>gpio_set_portg2digital</STRONG> (ARM, 252 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_configure
</UL>

<P><STRONG><a name="[195]"></a>gpio_configure</STRONG> (ARM, 1104 bytes, Stack size 12 bytes, libgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_portg2digital
</UL>

<P><STRONG><a name="[31f]"></a>gpio_readport</STRONG> (ARM, 248 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>gpio_setportdir</STRONG> (ARM, 516 bytes, Stack size 0 bytes, libgpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
</UL>

<P><STRONG><a name="[eb]"></a>gpio_setportval</STRONG> (ARM, 516 bytes, Stack size 0 bytes, libgpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
</UL>

<P><STRONG><a name="[ec]"></a>gpio_setportpull</STRONG> (ARM, 516 bytes, Stack size 0 bytes, libgpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
</UL>

<P><STRONG><a name="[320]"></a>gpio_setdebounce</STRONG> (ARM, 112 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>gpio_getdebounce</STRONG> (ARM, 48 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>gpio_setsrcgrp</STRONG> (ARM, 608 bytes, Stack size 36 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>gpio_getsrcgrp</STRONG> (ARM, 236 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>gpio_setintmode</STRONG> (ARM, 564 bytes, Stack size 8 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>gpio_getintmode</STRONG> (ARM, 360 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>gpio_setlatchtrigger</STRONG> (ARM, 36 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>gpio_getlatchtrigger</STRONG> (ARM, 20 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>gpio_getlatchval</STRONG> (ARM, 236 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>gpio_gettriggersrc</STRONG> (ARM, 248 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>gpio_cleartriggersrc</STRONG> (ARM, 320 bytes, Stack size 0 bytes, libgpio.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>jpegInit</STRONG> (ARM, 224 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[1a1]"></a>jpegGetDimension</STRONG> (ARM, 40 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[1a0]"></a>jpegSetDimension</STRONG> (ARM, 24 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[19f]"></a>jpegSetScalingFactor</STRONG> (ARM, 284 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[197]"></a>jpegCalScalingFactor</STRONG> (ARM, 672 bytes, Stack size 48 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[19e]"></a>jpegGetDecodedDimension</STRONG> (ARM, 32 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[7a]"></a>jpegISR</STRONG> (ARM, 2248 bytes, Stack size 56 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = jpegISR &rArr; jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDecodedDimension
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetScalingFactor
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDimension
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpegcodec.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>jpegWait</STRONG> (ARM, 188 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[32b]"></a>jpegIsReady</STRONG> (ARM, 32 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>jpegGetInfo</STRONG> (ARM, 28 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpegGetInfo &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[32c]"></a>jpegPower</STRONG> (ARM, 56 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>jpegOpen</STRONG> (ARM, 256 bytes, Stack size 24 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = jpegOpen &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK1Clock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>jpegSetEncodeMode</STRONG> (ARM, 392 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[1a6]"></a>jpegSetDecodeMode</STRONG> (ARM, 372 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[1a2]"></a>jpegDecodeTrigger</STRONG> (ARM, 240 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpegDecodeTrigger &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[1a3]"></a>jpegEncodeTrigger</STRONG> (ARM, 876 bytes, Stack size 32 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetScalingFactor
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDimension
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[32d]"></a>jpegGetScalingFactor</STRONG> (ARM, 88 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>jpegSetWindowDecode</STRONG> (ARM, 140 bytes, Stack size 24 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = jpegSetWindowDecode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[1a8]"></a>jpegAdjustQTAB</STRONG> (ARM, 76 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpegAdjustQTAB
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[1a5]"></a>jpegSetQTAB</STRONG> (ARM, 544 bytes, Stack size 20 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpegSetQTAB
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[e6]"></a>jpegIoctl</STRONG> (ARM, 1564 bytes, Stack size 32 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = jpegIoctl &rArr; jpegSetWindowDecode &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQTAB
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegAdjustQTAB
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetWindowDecode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecodeTrigger
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDecodeMode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetEncodeMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[1a9]"></a>jpegClose</STRONG> (ARM, 56 bytes, Stack size 8 bytes, jpegcodec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[32e]"></a>jpegPollInt</STRONG> (ARM, 44 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>fsInitFileSystem</STRONG> (ARM, 132 bytes, Stack size 8 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fsInitFileSystem &rArr; fs_enable_iow_cache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init_sector_buffer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_init_sector_cache
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_enable_iow_cache
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1ad]"></a>release_file_handle</STRONG> (ARM, 152 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = release_file_handle &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>

<P><STRONG><a name="[e3]"></a>fsCloseFile</STRONG> (ARM, 224 bytes, Stack size 24 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_file_from_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFileSystem
</UL>

<P><STRONG><a name="[1b1]"></a>fsCloseFileSystem</STRONG> (ARM, 144 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected
</UL>

<P><STRONG><a name="[32f]"></a>all_file_handle_is_free</STRONG> (ARM, 60 bytes, Stack size 0 bytes, nvtfat.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>allocate_file_handle</STRONG> (ARM, 216 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = allocate_file_handle &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>

<P><STRONG><a name="[1b4]"></a>fsHandleToDescriptor</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsHandleToDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRwDebug
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1f1]"></a>fsDescriptorToHandle</STRONG> (ARM, 100 bytes, Stack size 0 bytes, nvtfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
</UL>

<P><STRONG><a name="[1b5]"></a>fsIsFileOpened</STRONG> (ARM, 104 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsIsFileOpened &rArr; fsUnicodeNonCaseCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1b7]"></a>get_vdisk</STRONG> (ARM, 120 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_vdisk
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetLDiskVolID
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteDirTree
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMakeDirectory
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetVolumeLabel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetVolumeLabel
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDiskFreeSpace
</UL>

<P><STRONG><a name="[1b9]"></a>fsDiskFreeSpace</STRONG> (ARM, 144 bytes, Stack size 32 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1bb]"></a>fsSetVolumeLabel</STRONG> (ARM, 208 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1bc]"></a>fsGetVolumeLabel</STRONG> (ARM, 188 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1bd]"></a>fsSetFileSize</STRONG> (ARM, 480 bytes, Stack size 88 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
</UL>

<P><STRONG><a name="[e1]"></a>fsOpenFile</STRONG> (ARM, 804 bytes, Stack size 56 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUpperCase
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsFileOpened
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_file_to_disk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
</UL>

<P><STRONG><a name="[1c3]"></a>fsReadFile</STRONG> (ARM, 248 bytes, Stack size 32 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsReadFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[e2]"></a>fsWriteFile</STRONG> (ARM, 164 bytes, Stack size 32 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsWriteFile
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[1c4]"></a>fsMergeFile</STRONG> (ARM, 224 bytes, Stack size 552 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>

<P><STRONG><a name="[1c6]"></a>fsFileSeek</STRONG> (ARM, 480 bytes, Stack size 72 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fsFileSeek &rArr; fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1c7]"></a>fsIsEOF</STRONG> (ARM, 128 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[1c8]"></a>fsGetFileStatus</STRONG> (ARM, 256 bytes, Stack size 32 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[1c9]"></a>fsSetFileStatus</STRONG> (ARM, 412 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[1ca]"></a>fsSetFileAttribute</STRONG> (ARM, 508 bytes, Stack size 112 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[1cb]"></a>fsSetFileTime</STRONG> (ARM, 608 bytes, Stack size 96 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[1cc]"></a>fsGetFileSize</STRONG> (ARM, 164 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[1cd]"></a>fsGetFilePosition</STRONG> (ARM, 104 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsGetFilePosition
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[1ce]"></a>fsDeleteFile</STRONG> (ARM, 244 bytes, Stack size 280 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
</UL>

<P><STRONG><a name="[1cf]"></a>fsRenameFile</STRONG> (ARM, 516 bytes, Stack size 576 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
</UL>

<P><STRONG><a name="[1d0]"></a>fsCopyFile</STRONG> (ARM, 516 bytes, Stack size 136 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
</UL>

<P><STRONG><a name="[1d3]"></a>fsMoveFile</STRONG> (ARM, 412 bytes, Stack size 96 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1d4]"></a>fsFindFirst</STRONG> (ARM, 308 bytes, Stack size 24 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1d5]"></a>fsFindNext</STRONG> (ARM, 136 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1d6]"></a>fsFindClose</STRONG> (ARM, 180 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1d7]"></a>fsMakeDirectory</STRONG> (ARM, 204 bytes, Stack size 280 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>

<P><STRONG><a name="[1d8]"></a>fsRemoveDirectory</STRONG> (ARM, 204 bytes, Stack size 280 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteDirTree
</UL>

<P><STRONG><a name="[1d9]"></a>fsDeleteDirTree</STRONG> (ARM, 228 bytes, Stack size 24 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1df]"></a>fsGetDirectoryInfo</STRONG> (ARM, 80 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1e0]"></a>fsGetDirectoryInfo2</STRONG> (ARM, 80 bytes, Stack size 48 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1e1]"></a>fsGetLDiskVolID</STRONG> (ARM, 120 bytes, Stack size 24 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1e3]"></a>fsCheckDriverPointer</STRONG> (ARM, 56 bytes, Stack size 0 bytes, nvtfat_disk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_disk_driver
</UL>

<P><STRONG><a name="[b0]"></a>fsAssignDriveNumber</STRONG> (ARM, 264 bytes, Stack size 32 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsAssignDriveNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[330]"></a>fsInstallDiskMountCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_disk.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>fsInstallDiskUnmountCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_disk.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>fs_last_drive_no</STRONG> (ARM, 52 bytes, Stack size 0 bytes, nvtfat_disk.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>fsAllocateDisk</STRONG> (ARM, 120 bytes, Stack size 24 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fsAllocateDisk &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_drive_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[232]"></a>fsMountLogicalDisk</STRONG> (ARM, 140 bytes, Stack size 16 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsMountLogicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[1af]"></a>fsUnmountLogicalDisk</STRONG> (ARM, 184 bytes, Stack size 16 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_clear_sector_cache
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_drive_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_file_from_disk
</UL>

<P><STRONG><a name="[1ef]"></a>fsPhysicalDiskConnected</STRONG> (ARM, 584 bytes, Stack size 40 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_disk_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[1f0]"></a>fsUnmountPhysicalDisk</STRONG> (ARM, 272 bytes, Stack size 40 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDescriptorToHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose_sel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected
</UL>

<P><STRONG><a name="[1b2]"></a>fsPhysicalDiskDisconnected</STRONG> (ARM, 32 bytes, Stack size 8 bytes, nvtfat_disk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFileSystem
</UL>

<P><STRONG><a name="[1f2]"></a>fsReleaseDiskInformation</STRONG> (ARM, 96 bytes, Stack size 24 bytes, nvtfat_disk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFullDiskInfomation
</UL>

<P><STRONG><a name="[1f3]"></a>fsGetFullDiskInfomation</STRONG> (ARM, 420 bytes, Stack size 32 bytes, nvtfat_disk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReleaseDiskInformation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f6]"></a>fsUnicodeToAscii</STRONG> (ARM, 140 bytes, Stack size 24 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsUnicodeToAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
</UL>

<P><STRONG><a name="[1be]"></a>fsUnicodeStrLen</STRONG> (ARM, 76 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrCat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1de]"></a>fsUnicodeStrCat</STRONG> (ARM, 100 bytes, Stack size 24 bytes, nvtfat_language.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[e0]"></a>fsAsciiToUnicode</STRONG> (ARM, 124 bytes, Stack size 24 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsAsciiToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1c1]"></a>fsAsciiToUpperCase</STRONG> (ARM, 68 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL>

<P><STRONG><a name="[24d]"></a>fsUnicodeToUpperCase</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL>

<P><STRONG><a name="[240]"></a>fsUnicodeToLowerCase</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1f4]"></a>fsAsciiNonCaseCompare</STRONG> (ARM, 116 bytes, Stack size 24 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsAsciiNonCaseCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[1b6]"></a>fsUnicodeNonCaseCompare</STRONG> (ARM, 280 bytes, Stack size 32 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsUnicodeNonCaseCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsFileOpened
</UL>

<P><STRONG><a name="[1dd]"></a>fsUnicodeCopyStr</STRONG> (ARM, 88 bytes, Stack size 8 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsUnicodeCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1c0]"></a>fsGetAsciiFileName</STRONG> (ARM, 80 bytes, Stack size 544 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindLastSlash
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToAscii
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMakeDirectory
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile
</UL>

<P><STRONG><a name="[333]"></a>fsDebugUniStr</STRONG> (ARM, 136 bytes, Stack size 0 bytes, nvtfat_language.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>fmiSD_CardSel</STRONG> (ARM, 672 bytes, Stack size 16 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = fmiSD_CardSel &rArr; fmiSD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Set_clock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Change_Driver_Strength
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite1
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite0
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead2
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead1
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead0
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read2
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write1
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read1
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>

<P><STRONG><a name="[1fd]"></a>fmiSD_CardStatus</STRONG> (ARM, 104 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicIoctl
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRspDataIn
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp2
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[1fc]"></a>fmiInitSDDevice</STRONG> (ARM, 2048 bytes, Stack size 24 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = fmiInitSDDevice &rArr; fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Set_clock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Change_Driver_Strength
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen0
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen2
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen1
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdOpen_sel
</UL>

<P><STRONG><a name="[201]"></a>fmiSD_Read</STRONG> (ARM, 68 bytes, Stack size 24 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
</UL>

<P><STRONG><a name="[202]"></a>fmiSD_Write</STRONG> (ARM, 68 bytes, Stack size 24 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL>

<P><STRONG><a name="[203]"></a>sicSdClose_sel</STRONG> (ARM, 392 bytes, Stack size 8 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sicSdClose_sel &rArr; fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose0
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose2
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose
</UL>

<P><STRONG><a name="[204]"></a>sicSdClose</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose_sel
</UL>

<P><STRONG><a name="[9d]"></a>sicSdClose0</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sicSdClose0 &rArr; sicSdClose_sel &rArr; fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_card_remove
</UL>

<P><STRONG><a name="[205]"></a>sicSdClose1</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose_sel
</UL>

<P><STRONG><a name="[206]"></a>sicSdClose2</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose_sel
</UL>

<P><STRONG><a name="[207]"></a>sicSdOpen_sel</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[208]"></a>sicSdOpen</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[9b]"></a>sicSdOpen0</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = sicSdOpen0 &rArr; fmiInitSDDevice &rArr; fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_card_insert
</UL>

<P><STRONG><a name="[209]"></a>sicSdOpen1</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[20a]"></a>sicSdOpen2</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sdglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[af]"></a>sicOpen</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sicOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[20c]"></a>sicClose</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[ae]"></a>sicIoctl</STRONG> (ARM, 164 bytes, Stack size 24 bytes, sic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sicIoctl
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSetFMIReferenceClock
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSetCallBack
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[20f]"></a>sicSdRead0</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead0_SG
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead
</UL>

<P><STRONG><a name="[210]"></a>sicSdRead</STRONG> (ARM, 36 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead0
</UL>

<P><STRONG><a name="[211]"></a>sicSdRead1</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead1_SG
</UL>

<P><STRONG><a name="[212]"></a>sicSdRead2</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead2_SG
</UL>

<P><STRONG><a name="[213]"></a>sicSdRead0_SG</STRONG> (ARM, 120 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead0
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead_SG
</UL>

<P><STRONG><a name="[214]"></a>sicSdRead_SG</STRONG> (ARM, 44 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead0_SG
</UL>

<P><STRONG><a name="[215]"></a>sicSdRead1_SG</STRONG> (ARM, 120 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead1
</UL>

<P><STRONG><a name="[216]"></a>sicSdRead2_SG</STRONG> (ARM, 120 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead2
</UL>

<P><STRONG><a name="[217]"></a>sicSdWrite0</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite0_SG
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite
</UL>

<P><STRONG><a name="[218]"></a>sicSdWrite</STRONG> (ARM, 36 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite0
</UL>

<P><STRONG><a name="[219]"></a>sicSdWrite1</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite1_SG
</UL>

<P><STRONG><a name="[21a]"></a>sicSdWrite2</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite2_SG
</UL>

<P><STRONG><a name="[21b]"></a>sicSdWrite0_SG</STRONG> (ARM, 120 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite0
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite_SG
</UL>

<P><STRONG><a name="[21c]"></a>sicSdWrite_SG</STRONG> (ARM, 44 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite0_SG
</UL>

<P><STRONG><a name="[21d]"></a>sicSdWrite1_SG</STRONG> (ARM, 120 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite1
</UL>

<P><STRONG><a name="[21e]"></a>sicSdWrite2_SG</STRONG> (ARM, 120 bytes, Stack size 24 bytes, sic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite2
</UL>

<P><STRONG><a name="[334]"></a>videoIn1_SetInitFrame</STRONG> (ARM, 16 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>videoIn1_GetSkipFrame</STRONG> (ARM, 12 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>videoIn1_Init</STRONG> (ARM, 1548 bytes, Stack size 48 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = videoIn1_Init &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>videoIn1_Open</STRONG> (ARM, 388 bytes, Stack size 40 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = videoIn1_Open &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>videoIn1_Close</STRONG> (ARM, 36 bytes, Stack size 8 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = videoIn1_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>videoIn1_SetPacketFrameBufferControl</STRONG> (ARM, 72 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[336]"></a>videoIn1_GetPacketFrameBufferControl</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>videoIn1_InstallCallback</STRONG> (ARM, 148 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[337]"></a>videoIn1_Reset</STRONG> (ARM, 40 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>videoIn1_EnableInt</STRONG> (ARM, 96 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>videoIn1_DisableInt</STRONG> (ARM, 96 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[338]"></a>DrvVideoIn1_IsIntEnabled</STRONG> (ARM, 116 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>videoIn1_ClearInt</STRONG> (ARM, 188 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>videoIn1_PollInt</STRONG> (ARM, 116 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>videoIn1_SetPipeEnable</STRONG> (ARM, 56 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[33b]"></a>videoIn1_GetPipeEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>videoIn1_SetShadowRegister</STRONG> (ARM, 24 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>videoIn1_SetSensorPolarity</STRONG> (ARM, 108 bytes, Stack size 12 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = videoIn1_SetSensorPolarity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[33c]"></a>DrvVideoIn1_GetSensorPolarity</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>videoIn1_SetDataFormatAndOrder</STRONG> (ARM, 56 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[33d]"></a>DrvVideoIn1_GetDataFormatAndOrder</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>videoIn1_SetPlanarFormat</STRONG> (ARM, 132 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[33e]"></a>DrvVideoIn1_GetPlanarFormat</STRONG> (ARM, 20 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>videoIn1_SetMotionDet</STRONG> (ARM, 100 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[33f]"></a>videoIn1_GetMotionDet</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>videoIn1_SetMotionDetEx</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[340]"></a>videoIn1_GetMotionDetEx</STRONG> (ARM, 44 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>videoIn1_SetMotionDetFreq</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>videoIn1_GetMotionDetFreq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>videoIn1_SetOperationMode</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>videoIn1_GetOperationMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[343]"></a>DrvVideoIn1_GetProcessedDataCount</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>videoIn1_SetCropWinStartAddr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[344]"></a>videoIn1_GetCropWinStartAddr</STRONG> (ARM, 40 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>videoIn1_SetCropWinSize</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[21f]"></a>videoIn1_GetCropWinSize</STRONG> (ARM, 40 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoin1_EncodePipeSize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_PreviewPipeSize
</UL>

<P><STRONG><a name="[220]"></a>videoIn1_SetVerticalScaleFactor</STRONG> (ARM, 208 bytes, Stack size 20 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = videoIn1_SetVerticalScaleFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoin1_EncodePipeSize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_PreviewPipeSize
</UL>

<P><STRONG><a name="[345]"></a>videoIn1_GetVerticalScaleFactor</STRONG> (ARM, 128 bytes, Stack size 12 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>videoIn1_SetHorizontalScaleFactor</STRONG> (ARM, 192 bytes, Stack size 20 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = videoIn1_SetHorizontalScaleFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoin1_EncodePipeSize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_PreviewPipeSize
</UL>

<P><STRONG><a name="[346]"></a>videoIn1_GetHorizontalScaleFactor</STRONG> (ARM, 120 bytes, Stack size 12 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>videoIn1_SetFrameRateScaleFactor</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>videoIn1_GetFrameRateScaleFactor</STRONG> (ARM, 32 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>videoIn1_SetAddressMatch</STRONG> (ARM, 12 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>videoIn1_GetAddressMatch</STRONG> (ARM, 16 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>videoIn1_SetStride</STRONG> (ARM, 32 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>videoIn1_GetStride</STRONG> (ARM, 144 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>videoIn1_SetBaseStartAddress</STRONG> (ARM, 92 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[34b]"></a>videoIn1_GetBaseStartAddress</STRONG> (ARM, 100 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>videoIn1_SetInputType</STRONG> (ARM, 60 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[34c]"></a>videoIn1_GetInputType</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>videoIn1_SetStandardCCIR656</STRONG> (ARM, 56 bytes, Stack size 0 bytes, videoin1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[34d]"></a>videoIn1_SetFieldDetection</STRONG> (ARM, 48 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>videoIn1_GetFieldDetection</STRONG> (ARM, 36 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>videoIn1_SetColorEffect</STRONG> (ARM, 52 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>videoIn1_GetColorEffect</STRONG> (ARM, 24 bytes, Stack size 0 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>videoIn1_SetColorEffectParameter</STRONG> (ARM, 96 bytes, Stack size 12 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = videoIn1_SetColorEffectParameter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[351]"></a>videoIn1_GetColorEffectParameter</STRONG> (ARM, 128 bytes, Stack size 8 bytes, videoin1.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>videoIn1_PreviewPipeSize</STRONG> (ARM, 120 bytes, Stack size 24 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = videoIn1_PreviewPipeSize &rArr; videoIn1_SetHorizontalScaleFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_SetHorizontalScaleFactor
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_SetVerticalScaleFactor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_GetCropWinSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>videoin1_EncodePipeSize</STRONG> (ARM, 120 bytes, Stack size 24 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = videoin1_EncodePipeSize &rArr; videoIn1_SetHorizontalScaleFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_SetHorizontalScaleFactor
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_SetVerticalScaleFactor
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_GetCropWinSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>sysGetPhyPageAddr</STRONG> (ARM, 80 bytes, Stack size 16 bytes, wb_mmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>

<P><STRONG><a name="[223]"></a>sysSetCachePages</STRONG> (ARM, 176 bytes, Stack size 24 bytes, wb_mmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>

<P><STRONG><a name="[224]"></a>sysInitPageTable</STRONG> (ARM, 236 bytes, Stack size 40 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[352]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_mmu.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>sysInitMMUTable</STRONG> (ARM, 392 bytes, Stack size 48 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSdramSizebyMB
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[1ab]"></a>fs_fat_init_sector_cache</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
</UL>

<P><STRONG><a name="[353]"></a>FAT_dump_sector_cache</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>fs_fat_flush_sector_cache</STRONG> (ARM, 412 bytes, Stack size 32 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_whole_sector_cache
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[22b]"></a>fs_fat_check_out_sec</STRONG> (ARM, 92 bytes, Stack size 24 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_whole_sector_cache
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL>

<P><STRONG><a name="[25e]"></a>fs_fat_check_in_sec</STRONG> (ARM, 16 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL>

<P><STRONG><a name="[1e7]"></a>fs_fat_clear_sector_cache</STRONG> (ARM, 112 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[1ac]"></a>fs_enable_iow_cache</STRONG> (ARM, 140 bytes, Stack size 8 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_enable_iow_cache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
</UL>

<P><STRONG><a name="[1e8]"></a>fsFlushIOCache</STRONG> (ARM, 88 bytes, Stack size 16 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fsFlushIOCache &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[229]"></a>fs_flush_iow_cache</STRONG> (ARM, 12 bytes, Stack size 8 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_flush_iow_cache &rArr; fsFlushIOCache &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[354]"></a>fsInstallIoWriteCallBack</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nvtfat_io.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>fsDiskWriteComplete</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nvtfat_io.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>fsIOWrite</STRONG> (ARM, 608 bytes, Stack size 48 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_ioc_block
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bOverlayWithCacheBlock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL>

<P><STRONG><a name="[1ec]"></a>fsIORead</STRONG> (ARM, 488 bytes, Stack size 64 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_ioc_block
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bOverlayWithDirtyCache
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache_blocks
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>

<P><STRONG><a name="[1ba]"></a>read_fs_info</STRONG> (ARM, 1340 bytes, Stack size 72 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = read_fs_info &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDiskFreeSpace
</UL>

<P><STRONG><a name="[1ed]"></a>fs_fat_parse_partition</STRONG> (ARM, 1184 bytes, Stack size 664 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = fs_fat_parse_partition &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDumpBufferHex
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMountLogicalDisk
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[233]"></a>lname_to_sname</STRONG> (ARM, 288 bytes, Stack size 40 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = lname_to_sname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL>

<P><STRONG><a name="[237]"></a>sname_compare</STRONG> (ARM, 404 bytes, Stack size 64 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sname_compare &rArr; split_sname &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_sname
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL>

<P><STRONG><a name="[23e]"></a>fs_fat_delete_file</STRONG> (ARM, 868 bytes, Stack size 2200 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824 + Unknown Stack Size
<LI>Call Chain = fs_fat_delete_file &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rmdir
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delfile
</UL>

<P><STRONG><a name="[1da]"></a>fs_fat_delete_tree</STRONG> (ARM, 764 bytes, Stack size 1168 bytes, nvtfat_ldisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrCat
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsFileOpened
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteDirTree
</UL>

<P><STRONG><a name="[1c5]"></a>fs_fat_merge_file</STRONG> (ARM, 1184 bytes, Stack size 2248 bytes, nvtfat_ldisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile
</UL>

<P><STRONG><a name="[244]"></a>fs_fat_create_file</STRONG> (ARM, 1244 bytes, Stack size 1192 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = fs_fat_create_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sdir_chksum
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[24a]"></a>fs_fat_rename_file</STRONG> (ARM, 1376 bytes, Stack size 2776 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3760 + Unknown Stack Size
<LI>Call Chain = fs_fat_rename_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sdir_chksum
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
</UL>

<P><STRONG><a name="[1aa]"></a>fs_init_sector_buffer</STRONG> (ARM, 48 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
</UL>

<P><STRONG><a name="[1eb]"></a>fsAllocateSector</STRONG> (ARM, 112 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[1ee]"></a>fsFreeSector</STRONG> (ARM, 80 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[1b8]"></a>fsToUpperCase</STRONG> (ARM, 40 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAssignDriveNumber
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1f5]"></a>fsFindLastSlash</STRONG> (ARM, 76 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
</UL>

<P><STRONG><a name="[23f]"></a>fsTruncatePath</STRONG> (ARM, 108 bytes, Stack size 16 bytes, nvtfat_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsTruncatePath &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindLastSlash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[24e]"></a>unicode_wild_card_comapre</STRONG> (ARM, 256 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL>

<P><STRONG><a name="[24b]"></a>fsUnicodeWildCardCompare</STRONG> (ARM, 244 bytes, Stack size 1064 bytes, nvtfat_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unicode_wild_card_comapre
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last_dot
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToUpperCase
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
</UL>

<P><STRONG><a name="[231]"></a>fsDumpBufferHex</STRONG> (ARM, 72 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[20e]"></a>fmiSetCallBack</STRONG> (ARM, 36 bytes, Stack size 0 bytes, fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicIoctl
</UL>

<P><STRONG><a name="[20b]"></a>fmiInitDevice</STRONG> (ARM, 72 bytes, Stack size 0 bytes, fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicOpen
</UL>

<P><STRONG><a name="[20d]"></a>fmiSetFMIReferenceClock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicIoctl
</UL>

<P><STRONG><a name="[24f]"></a>fmiSDCheckSector</STRONG> (ARM, 84 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = fmiSDCheckSector &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL>

<P><STRONG><a name="[255]"></a>fmiCheckRB</STRONG> (ARM, 76 bytes, Stack size 0 bytes, sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL>

<P><STRONG><a name="[250]"></a>fmiSDCommand</STRONG> (ARM, 120 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmiSDCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
</UL>

<P><STRONG><a name="[251]"></a>fmiSDCmdAndRsp</STRONG> (ARM, 604 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
</UL>

<P><STRONG><a name="[252]"></a>fmiSDCmdAndRsp2</STRONG> (ARM, 276 bytes, Stack size 48 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fmiSDCmdAndRsp2
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
</UL>

<P><STRONG><a name="[253]"></a>fmiSDCmdAndRspDataIn</STRONG> (ARM, 248 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = fmiSDCmdAndRspDataIn &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSwitchToHighSpeed
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
</UL>

<P><STRONG><a name="[1f9]"></a>fmiSD_Change_Driver_Strength</STRONG> (ARM, 256 bytes, Stack size 0 bytes, sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>

<P><STRONG><a name="[1f8]"></a>fmiSD_Set_clock</STRONG> (ARM, 656 bytes, Stack size 32 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = fmiSD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>

<P><STRONG><a name="[1fe]"></a>fmiSD_Init</STRONG> (ARM, 1372 bytes, Stack size 48 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = fmiSD_Init &rArr; fmiSD_Set_clock &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp2
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Set_clock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[254]"></a>fmiSwitchToHighSpeed</STRONG> (ARM, 392 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = fmiSwitchToHighSpeed &rArr; fmiSDCmdAndRspDataIn &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRspDataIn
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSelectCard
</UL>

<P><STRONG><a name="[200]"></a>fmiSelectCard</STRONG> (ARM, 800 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = fmiSelectCard &rArr; fmiSwitchToHighSpeed &rArr; fmiSDCmdAndRspDataIn &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSwitchToHighSpeed
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRspDataIn
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiCheckRB
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Set_clock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Change_Driver_Strength
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[256]"></a>fmiSD_Read_in_blksize</STRONG> (ARM, 1124 bytes, Stack size 48 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = fmiSD_Read_in_blksize &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule (Weak Reference)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiCheckRB
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCheckSector
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
</UL>

<P><STRONG><a name="[1fa]"></a>fmiSD_Read_in</STRONG> (ARM, 52 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = fmiSD_Read_in &rArr; fmiSD_Read_in_blksize &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead2
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead1
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdRead0
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>

<P><STRONG><a name="[1fb]"></a>fmiSD_Write_in</STRONG> (ARM, 1072 bytes, Stack size 40 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = fmiSD_Write_in &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule (Weak Reference)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiCheckRB
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCheckSector
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite1
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdWrite0
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write2
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write1
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL>

<P><STRONG><a name="[1ff]"></a>fmiGet_SD_info</STRONG> (ARM, 680 bytes, Stack size 56 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = fmiGet_SD_info &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRspDataIn
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp2
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCmdAndRsp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSDCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Show_info
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
</UL>

<P><STRONG><a name="[258]"></a>fmiSD_Show_info</STRONG> (ARM, 592 bytes, Stack size 128 bytes, sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiGet_SD_info
</UL>

<P><STRONG><a name="[245]"></a>fs_fat_set_sdir_name</STRONG> (ARM, 172 bytes, Stack size 24 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = fs_fat_set_sdir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[23a]"></a>fs_fat_get_sdir_name</STRONG> (ARM, 212 bytes, Stack size 24 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fs_fat_get_sdir_name &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[259]"></a>fs_fat_get_ldir_name</STRONG> (ARM, 236 bytes, Stack size 48 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_fat_get_ldir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
</UL>

<P><STRONG><a name="[247]"></a>fs_fat_set_dire_mtime</STRONG> (ARM, 260 bytes, Stack size 48 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fs_fat_set_dire_mtime &rArr; sysGetCurrentTime &rArr; sysUTC_To_DOS_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[248]"></a>fs_fat_get_dire_info</STRONG> (ARM, 236 bytes, Stack size 16 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fs_fat_get_dire_info &rArr; fs_fat_get_sdir_name &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[25a]"></a>fs_fat_set_dire_info</STRONG> (ARM, 264 bytes, Stack size 16 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = fs_fat_set_dire_info &rArr; fs_fat_set_sdir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>

<P><STRONG><a name="[25d]"></a>fs_fat_search_file</STRONG> (ARM, 660 bytes, Stack size 1400 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = fs_fat_search_file &rArr; search_file_in_directroy &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToUpperCase
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToAscii
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[356]"></a>fsInstallFileDelCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_fop.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>fs_read_fat_table</STRONG> (ARM, 516 bytes, Stack size 56 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_in_sec
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[243]"></a>fs_write_fat_table</STRONG> (ARM, 676 bytes, Stack size 64 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_in_sec
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[25f]"></a>fs_update_first_cluster</STRONG> (ARM, 196 bytes, Stack size 32 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fs_update_first_cluster &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[260]"></a>fs_fat_allocate_cluster</STRONG> (ARM, 1000 bytes, Stack size 48 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = fs_fat_allocate_cluster &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
</UL>

<P><STRONG><a name="[241]"></a>fs_fat_reclaim_clusters</STRONG> (ARM, 224 bytes, Stack size 32 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fs_fat_reclaim_clusters &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[262]"></a>fsRwDebug</STRONG> (ARM, 28 bytes, Stack size 16 bytes, nvtfat_fop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>

<P><STRONG><a name="[239]"></a>fs_fat_get_next_dir_entry</STRONG> (ARM, 272 bytes, Stack size 40 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[357]"></a>fs_fat_dump_fcb</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nvtfat_fop.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer (via BLX)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen (via BLX)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice (via BLX)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFullDiskInfomation (via BLX)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected (via BLX)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk (via BLX)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records (via BLX)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst (via BLX)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile (via BLX)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1d2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen (via BLX)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicSdClose_sel (via BLX)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice (via BLX)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition (via BLX)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReleaseDiskInformation (via BLX)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk (via BLX)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected (via BLX)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk (via BLX)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk (via BLX)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected (via BLX)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose (via BLX)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext (via BLX)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst (via BLX)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile (via BLX)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[269]"></a>_ll_sdiv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[160]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init (via BLX)
</UL>

<P><STRONG><a name="[e9]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest (via BLX)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file (via BLX)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname (via BLX)
</UL>

<P><STRONG><a name="[27e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[27f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[88]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[271]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1bf]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile (via BLX)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file (via BLX)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root (via BLX)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy (via BLX)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare (via BLX)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_sname (via BLX)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice (via BLX)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName (via BLX)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory (via BLX)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMakeDirectory (via BLX)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile (via BLX)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile (via BLX)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile (via BLX)
</UL>

<P><STRONG><a name="[192]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile (via BLX)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname (via BLX)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[234]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname (via BLX)
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dramClockSwitchStart
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysClockSwitchStart
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetVolumeLabel
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetVolumeLabel
</UL>

<P><STRONG><a name="[274]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[358]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sensor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_vin_device
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFullDiskInfomation
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[359]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_WT8861_VGA
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9912_VGA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TW9900_VGA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_TwoFields
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GM7150_OneField
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetVolumeLabel
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SP1628_HD
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SC1046_HD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_SA71113_VGA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_VGA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV9660_SXGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7725_VGA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV7670_VGA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_VGA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_OV10633_HD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_QXGA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_HD
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99340_FULLHD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_UXGA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99252_SVGA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_VGA
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_SVGA
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99160_HD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_VGA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_SVGA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99142_HD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA_MotionDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_VGA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_HD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99141_DEV1_HD_DEV2_VGA
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_NT99050
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_VGA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM2056_HD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_VGA
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1375_HD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_VGA
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_SXGA
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_HM1246_HD720P
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_GC0308_VGA
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearVABuffer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[276]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[275]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiInitSDDevice
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_enable_iow_cache
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecodeTrigger
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal (via BLX)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen (via BLX)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (via BLX)
</UL>

<P><STRONG><a name="[35c]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[235]"></a>strncpy</STRONG> (ARM, 104 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
</UL>

<P><STRONG><a name="[1dc]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[35e]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[267]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
</UL>

<P><STRONG><a name="[35f]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[27a]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8a]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[27d]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[361]"></a>_ll_udiv</STRONG> (ARM, 752 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[26c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[7c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[26f]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
</UL>

<P><STRONG><a name="[363]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[364]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[280]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[8c]"></a>_initio</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[8e]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[27b]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[27c]"></a>__rt_heap_escrow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[278]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[287]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[293]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[29a]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[365]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[299]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[366]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[367]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[28a]"></a>__flsbuf</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[2a1]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[36a]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>setvbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[281]"></a>freopen</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[291]"></a>fopen</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>

<P><STRONG><a name="[284]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[36b]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[286]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[282]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[285]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[290]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[36c]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[28f]"></a>_writebuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[292]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[28b]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[297]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[296]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[298]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[36d]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal (via BLX)
</UL>

<P><STRONG><a name="[36e]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_pointer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetDramClock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetAPBClock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetHCLK234Clock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetAPBClock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCPUClock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCPUClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDramClock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sysGetPLLControlRegister
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Open
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn0_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Open
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;videoIn1_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Set_clock
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[171]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_dcache.o(MEM_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>

<P><STRONG><a name="[225]"></a>sysSetupCP15</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_sysctl.o(SYS_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[272]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7e]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>vpostAllocVABuffer</STRONG> (ARM, 144 bytes, Stack size 16 bytes, w55fa92_vpost_driver.o(i.vpostAllocVABuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearVABuffer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_pointer
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2b3]"></a>vpostAllocVABufferFromAP</STRONG> (ARM, 44 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostAllocVABufferFromAP))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2a6]"></a>vpostClearInt</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostClearInt))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostISR
</UL>

<P><STRONG><a name="[2a4]"></a>vpostClearVABuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, w55fa92_vpost_driver.o(i.vpostClearVABuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostClearVABuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
</UL>

<P><STRONG><a name="[123]"></a>vpostEnableInt</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostEnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST_2
</UL>

<P><STRONG><a name="[122]"></a>vpostInstallCallBack</STRONG> (ARM, 204 bytes, Stack size 16 bytes, w55fa92_vpost_driver.o(i.vpostInstallCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = vpostInstallCallBack &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST_2
</UL>

<P><STRONG><a name="[2a5]"></a>vpostIsIntEnabled</STRONG> (ARM, 36 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostIsIntEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostISR
</UL>

<P><STRONG><a name="[121]"></a>vpostLCMInit</STRONG> (ARM, 28 bytes, Stack size 16 bytes, w55fa92_vpost.o(i.vpostLCMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = vpostLCMInit &rArr; vpostLCMInit_GIANTPLUS_GPM1006D0 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVPOST_2
</UL>

<P><STRONG><a name="[2a7]"></a>vpostLCMInit_GIANTPLUS_GPM1006D0</STRONG> (ARM, 460 bytes, Stack size 48 bytes, w55fa92_vpost_giantplus_gpm1006d0.o(i.vpostLCMInit_GIANTPLUS_GPM1006D0))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vpostLCMInit_GIANTPLUS_GPM1006D0 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputHz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostsetLCM_TimingType
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStopTrigger
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStartTrigger
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetYUVEndianSelect
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_VTiming
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_SignalPolarity
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_ImageWindow
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_HTiming
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSerialSyncLCM_Interface
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_TypeSelect
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_ImageSource
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer_Size
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer_DataType
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetDataBusPin
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABufferFromAP
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
</UL>

<P><STRONG><a name="[2a9]"></a>vpostSetDataBusPin</STRONG> (ARM, 464 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetDataBusPin))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[120]"></a>vpostSetFrameBuffer</STRONG> (ARM, 36 bytes, Stack size 0 bytes, w55fa92_vpost.o(i.vpostSetFrameBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPOST_InterruptServiceRiuntine_2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPOST_InterruptServiceRiuntine
</UL>

<P><STRONG><a name="[2b4]"></a>vpostSetFrameBuffer_DataType</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetFrameBuffer_DataType))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2ab]"></a>vpostSetFrameBuffer_Size</STRONG> (ARM, 56 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetFrameBuffer_Size))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2aa]"></a>vpostSetLCM_ImageSource</STRONG> (ARM, 28 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetLCM_ImageSource))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2ac]"></a>vpostSetLCM_TypeSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetLCM_TypeSelect))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2ae]"></a>vpostSetSerialSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetSerialSyncLCM_Interface))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2af]"></a>vpostSetSyncLCM_HTiming</STRONG> (ARM, 48 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetSyncLCM_HTiming))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2b1]"></a>vpostSetSyncLCM_ImageWindow</STRONG> (ARM, 88 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetSyncLCM_ImageWindow))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2b2]"></a>vpostSetSyncLCM_SignalPolarity</STRONG> (ARM, 152 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetSyncLCM_SignalPolarity))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2b0]"></a>vpostSetSyncLCM_VTiming</STRONG> (ARM, 48 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetSyncLCM_VTiming))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2b5]"></a>vpostSetYUVEndianSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostSetYUVEndianSelect))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2b6]"></a>vpostVAStartTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostVAStartTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2a8]"></a>vpostVAStopTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostVAStopTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[2ad]"></a>vpostsetLCM_TimingType</STRONG> (ARM, 56 bytes, Stack size 0 bytes, w55fa92_vpost_driver.o(i.vpostsetLCM_TimingType))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_GIANTPLUS_GPM1006D0
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[2b7]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[2ba]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[371]"></a>_fflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[372]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[2bb]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2b9]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[2b8]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ea]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
</UL>

<P><STRONG><a name="[ee]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
</UL>

<P><STRONG><a name="[ef]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
</UL>

<P><STRONG><a name="[f3]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_hm1375.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1375_Init
</UL>

<P><STRONG><a name="[fd]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
</UL>

<P><STRONG><a name="[fe]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99050_Init
</UL>

<P><STRONG><a name="[102]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
</UL>

<P><STRONG><a name="[103]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
</UL>

<P><STRONG><a name="[104]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
</UL>

<P><STRONG><a name="[105]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_nt99141.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99141_Init
</UL>

<P><STRONG><a name="[107]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
</UL>

<P><STRONG><a name="[108]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
</UL>

<P><STRONG><a name="[109]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
</UL>

<P><STRONG><a name="[10a]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_nt99160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99160_Init
</UL>

<P><STRONG><a name="[10c]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
</UL>

<P><STRONG><a name="[10d]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
</UL>

<P><STRONG><a name="[10e]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
</UL>

<P><STRONG><a name="[10f]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_nt99252.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99252_Init
</UL>

<P><STRONG><a name="[111]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
</UL>

<P><STRONG><a name="[112]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
</UL>

<P><STRONG><a name="[113]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
</UL>

<P><STRONG><a name="[114]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_nt99340.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99340_Init
</UL>

<P><STRONG><a name="[116]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov7670.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>

<P><STRONG><a name="[117]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov7670.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_Init
</UL>

<P><STRONG><a name="[119]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[11a]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[11c]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov9660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
</UL>

<P><STRONG><a name="[11d]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov9660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV9660_Init
</UL>

<P><STRONG><a name="[6a]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[6b]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[6c]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[6d]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[6f]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[126]"></a>DrvI2C_Delay</STRONG> (ARM, 100 bytes, Stack size 16 bytes, drvi2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvI2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Slave_ReadByte
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>

<P><STRONG><a name="[128]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_wt8861.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[129]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_wt8861.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WT8861_Init
</UL>

<P><STRONG><a name="[12d]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_gc0308.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
</UL>

<P><STRONG><a name="[12e]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_gc0308.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0308_Init
</UL>

<P><STRONG><a name="[130]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_sa71113.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
</UL>

<P><STRONG><a name="[131]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_sa71113.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SA71113_Init
</UL>

<P><STRONG><a name="[133]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_sp1628.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
</UL>

<P><STRONG><a name="[134]"></a>SnrPowerDown</STRONG> (ARM, 228 bytes, Stack size 8 bytes, smpl_sp1628.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrPowerDown &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP1628_Init
</UL>

<P><STRONG><a name="[136]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_tw9912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
</UL>

<P><STRONG><a name="[137]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_tw9912.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9912_Init
</UL>

<P><STRONG><a name="[13d]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_tw9900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
</UL>

<P><STRONG><a name="[13e]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_tw9900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TW9900_Init
</UL>

<P><STRONG><a name="[140]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
</UL>

<P><STRONG><a name="[141]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_gm7150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM7150_Init
</UL>

<P><STRONG><a name="[145]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
</UL>

<P><STRONG><a name="[146]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
</UL>

<P><STRONG><a name="[147]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
</UL>

<P><STRONG><a name="[148]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_nt99142.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NT99142_Init
</UL>

<P><STRONG><a name="[14a]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
</UL>

<P><STRONG><a name="[14b]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
</UL>

<P><STRONG><a name="[14c]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_SetHue
</UL>

<P><STRONG><a name="[14d]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV10633_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_GetHue
</UL>

<P><STRONG><a name="[b]"></a>IQ_GetBrightness</STRONG> (ARM, 8 bytes, Stack size 0 bytes, smpl_ov10633.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>IQ_SetBrightness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, smpl_ov10633.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>IQ_GetSharpness</STRONG> (ARM, 8 bytes, Stack size 0 bytes, smpl_ov10633.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>IQ_SetSharpness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, smpl_ov10633.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>IQ_GetContrast</STRONG> (ARM, 8 bytes, Stack size 0 bytes, smpl_ov10633.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>IQ_SetContrast</STRONG> (ARM, 12 bytes, Stack size 0 bytes, smpl_ov10633.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>IQ_GetHue</STRONG> (ARM, 36 bytes, Stack size 16 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IQ_GetHue &rArr; I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_16bitReg_8bitData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>IQ_SetHue</STRONG> (ARM, 56 bytes, Stack size 16 bytes, smpl_ov10633.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = IQ_SetHue &rArr; I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_16bitReg_8bitData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_ov10633.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_sc1046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
</UL>

<P><STRONG><a name="[152]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_sc1046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
</UL>

<P><STRONG><a name="[153]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_sc1046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
</UL>

<P><STRONG><a name="[154]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_sc1046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC1046_Init
</UL>

<P><STRONG><a name="[156]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
</UL>

<P><STRONG><a name="[157]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150_Init
</UL>

<P><STRONG><a name="[75]"></a>TVP_I2c_delay</STRONG> (ARM, 60 bytes, Stack size 8 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TVP_I2c_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_tvp5150.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>TVP5150_Init</STRONG> (ARM, 608 bytes, Stack size 40 bytes, smpl_tvp5150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = TVP5150_Init &rArr; SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150SetInputSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TVP5150SetVideoformat
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrPowerDown
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnrReset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_8bitSlaveAddr_8bitReg_8bitData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_TwoFields
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Smpl_TVP5150_OneField
</UL>

<P><STRONG><a name="[15b]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[15c]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[15d]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[15e]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_hm1246.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM1246_Init
</UL>

<P><STRONG><a name="[161]"></a>SnrReset</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = SnrReset &rArr; sysDelay &rArr; sysStartTimer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
</UL>

<P><STRONG><a name="[162]"></a>SnrPowerDown</STRONG> (ARM, 124 bytes, Stack size 8 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SnrPowerDown
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportval
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportpull
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_setportdir
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
</UL>

<P><STRONG><a name="[163]"></a>I2C_Write_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 184 bytes, Stack size 24 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = I2C_Write_8bitSlaveAddr_16bitReg_8bitData &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMOSHM2056_SetLightMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
</UL>

<P><STRONG><a name="[164]"></a>I2C_Read_8bitSlaveAddr_16bitReg_8bitData</STRONG> (ARM, 116 bytes, Stack size 16 bytes, smpl_hm2056.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_8bitSlaveAddr_16bitReg_8bitData &rArr; DrvI2C_WriteByte &rArr; DrvI2C_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_WriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_SendStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HM2056_Init
</UL>

<P><STRONG><a name="[76]"></a>videoIn0_IntHandler</STRONG> (ARM, 424 bytes, Stack size 16 bytes, videoin0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = videoIn0_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin0.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>sysSetBaudRate</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[18e]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[18f]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[190]"></a>sysPutNumber</STRONG> (ARM, 448 bytes, Stack size 80 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[191]"></a>FormatItem</STRONG> (ARM, 540 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[2a2]"></a>shift_pointer</STRONG> (ARM, 72 bytes, Stack size 24 bytes, w55fa92_vpost_driver.o(i.shift_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = shift_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
</UL>

<P><STRONG><a name="[7f]"></a>vpostISR</STRONG> (ARM, 288 bytes, Stack size 8 bytes, w55fa92_vpost_driver.o(i.vpostISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostISR
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostIsIntEnabled
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w55fa92_vpost_driver.o(i.vpostInstallCallBack)
</UL>
<P><STRONG><a name="[1ae]"></a>unlink_file_from_disk</STRONG> (ARM, 168 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
</UL>

<P><STRONG><a name="[1b0]"></a>get_slot_index</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nvtfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileSize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsEOF
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>

<P><STRONG><a name="[1c2]"></a>link_file_to_disk</STRONG> (ARM, 104 bytes, Stack size 0 bytes, nvtfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
</UL>

<P><STRONG><a name="[1db]"></a>get_subdir_info</STRONG> (ARM, 432 bytes, Stack size 1208 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrCat
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetDirectoryInfo2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetDirectoryInfo
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1e2]"></a>add_new_disk_driver</STRONG> (ARM, 84 bytes, Stack size 8 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_new_disk_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
</UL>

<P><STRONG><a name="[1e5]"></a>allocate_drive_number</STRONG> (ARM, 372 bytes, Stack size 32 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = allocate_drive_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
</UL>

<P><STRONG><a name="[1e9]"></a>release_drive_number</STRONG> (ARM, 96 bytes, Stack size 0 bytes, nvtfat_disk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[1ea]"></a>parse_partition_records</STRONG> (ARM, 1044 bytes, Stack size 120 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[2e]"></a>sd_disk_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>sd_disk_ioctl</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>sd_disk_read</STRONG> (ARM, 92 bytes, Stack size 24 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = sd_disk_read &rArr; fmiSD_Read_in &rArr; fmiSD_Read_in_blksize &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>sd_disk_write</STRONG> (ARM, 96 bytes, Stack size 32 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = sd_disk_write &rArr; fmiSD_Write_in &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>sd_disk_init0</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>sd_disk_ioctl0</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>sd_disk_read0</STRONG> (ARM, 44 bytes, Stack size 24 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = sd_disk_read0 &rArr; sd_disk_read &rArr; fmiSD_Read_in &rArr; fmiSD_Read_in_blksize &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>sd_disk_write0</STRONG> (ARM, 52 bytes, Stack size 32 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = sd_disk_write0 &rArr; sd_disk_write &rArr; fmiSD_Write_in &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_disk_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>sd_disk_init1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>sd_disk_ioctl1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>sd_disk_read1</STRONG> (ARM, 92 bytes, Stack size 24 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = sd_disk_read1 &rArr; fmiSD_Read_in &rArr; fmiSD_Read_in_blksize &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>sd_disk_write1</STRONG> (ARM, 96 bytes, Stack size 32 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = sd_disk_write1 &rArr; fmiSD_Write_in &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>sd_disk_init2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>sd_disk_ioctl2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sdglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>sd_disk_read2</STRONG> (ARM, 92 bytes, Stack size 24 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = sd_disk_read2 &rArr; fmiSD_Read_in &rArr; fmiSD_Read_in_blksize &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>sd_disk_write2</STRONG> (ARM, 96 bytes, Stack size 32 bytes, sdglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = sd_disk_write2 &rArr; fmiSD_Write_in &rArr; fmiSDCmdAndRsp &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_CardSel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdglue.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>videoIn1_IntHandler</STRONG> (ARM, 452 bytes, Stack size 24 bytes, videoin1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = videoIn1_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videoin1.o(.text)
</UL>
<P><STRONG><a name="[227]"></a>check_out_fat_sector</STRONG> (ARM, 452 bytes, Stack size 32 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
</UL>

<P><STRONG><a name="[22a]"></a>fs_flush_whole_sector_cache</STRONG> (ARM, 40 bytes, Stack size 8 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fs_flush_whole_sector_cache &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
</UL>

<P><STRONG><a name="[22c]"></a>flush_cache_blocks</STRONG> (ARM, 440 bytes, Stack size 40 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flush_cache_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
</UL>

<P><STRONG><a name="[22e]"></a>bOverlayWithCacheBlock</STRONG> (ARM, 104 bytes, Stack size 0 bytes, nvtfat_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
</UL>

<P><STRONG><a name="[230]"></a>bOverlayWithDirtyCache</STRONG> (ARM, 132 bytes, Stack size 12 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bOverlayWithDirtyCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[22f]"></a>find_ioc_block</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[22d]"></a>get_ioc_block</STRONG> (ARM, 240 bytes, Stack size 32 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[236]"></a>split_sname</STRONG> (ARM, 108 bytes, Stack size 24 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = split_sname &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare
</UL>

<P><STRONG><a name="[238]"></a>generate_short_name</STRONG> (ARM, 256 bytes, Stack size 608 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUpperCase
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[246]"></a>get_sdir_chksum</STRONG> (ARM, 80 bytes, Stack size 8 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sdir_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[23b]"></a>check_dir_empty</STRONG> (ARM, 360 bytes, Stack size 56 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = check_dir_empty &rArr; fsFileSeek &rArr; fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL>

<P><STRONG><a name="[23c]"></a>build_ldir_entry</STRONG> (ARM, 332 bytes, Stack size 32 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = build_ldir_entry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[23d]"></a>find_free_dir_entry</STRONG> (ARM, 316 bytes, Stack size 80 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = find_free_dir_entry &rArr; fsFileSeek &rArr; fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[58]"></a>_delfile</STRONG> (ARM, 40 bytes, Stack size 16 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = _delfile &rArr; fs_fat_delete_file &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>_mkdir</STRONG> (ARM, 160 bytes, Stack size 24 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _mkdir &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>_rmdir</STRONG> (ARM, 40 bytes, Stack size 16 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = _rmdir &rArr; fs_fat_delete_file &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>_move</STRONG> (ARM, 52 bytes, Stack size 40 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3800 + Unknown Stack Size
<LI>Call Chain = _move &rArr; fs_fat_rename_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>_volume_label</STRONG> (ARM, 584 bytes, Stack size 96 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = _volume_label &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[24c]"></a>find_last_dot</STRONG> (ARM, 76 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL>

<P><STRONG><a name="[25b]"></a>search_file_in_directroy</STRONG> (ARM, 756 bytes, Stack size 608 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = search_file_in_directroy &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL>

<P><STRONG><a name="[25c]"></a>search_file_in_fat16_root</STRONG> (ARM, 644 bytes, Stack size 600 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = search_file_in_fat16_root &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL>

<P><STRONG><a name="[261]"></a>alloc_rw_buff</STRONG> (ARM, 128 bytes, Stack size 16 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alloc_rw_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
</UL>

<P><STRONG><a name="[5f]"></a>__fwrite</STRONG> (ARM, 1552 bytes, Stack size 88 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __fwrite &rArr; fs_fat_allocate_cluster &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>__fseek</STRONG> (ARM, 636 bytes, Stack size 64 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __fseek &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>__fopen</STRONG> (ARM, 1460 bytes, Stack size 88 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = __fopen &rArr; fs_fat_search_file &rArr; search_file_in_directroy &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>__fclose</STRONG> (ARM, 436 bytes, Stack size 64 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __fclose &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>__fread</STRONG> (ARM, 1408 bytes, Stack size 88 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>__fsizing</STRONG> (ARM, 1124 bytes, Stack size 56 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __fsizing &rArr; fs_fat_allocate_cluster &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>__fget_stat</STRONG> (ARM, 340 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>__fset_stat</STRONG> (ARM, 316 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[263]"></a>find_file</STRONG> (ARM, 840 bytes, Stack size 632 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>

<P><STRONG><a name="[265]"></a>creation_time_compare</STRONG> (ARM, 300 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>

<P><STRONG><a name="[266]"></a>modification_time_compare</STRONG> (ARM, 300 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>

<P><STRONG><a name="[264]"></a>find_fileEx</STRONG> (ARM, 1704 bytes, Stack size 56 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = find_fileEx &rArr; find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modification_time_compare
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creation_time_compare
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__find_next
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__find_first
</UL>

<P><STRONG><a name="[65]"></a>__find_first</STRONG> (ARM, 96 bytes, Stack size 16 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = __find_first &rArr; find_fileEx &rArr; find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>__find_next</STRONG> (ARM, 32 bytes, Stack size 16 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = __find_next &rArr; find_fileEx &rArr; find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>__find_close</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>__fioctl</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[29f]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[29e]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[29d]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2a0]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[7d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[294]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[26d]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[26e]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[257]"></a>schedule</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Read_in_blksize
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmiSD_Write_in
</UL>
<HR></body></html>
